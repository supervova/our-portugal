{% set body_classes = 'is-real-estate' %}

{% extends "base/base.twig" %}

{% block content %}
  {# HERO #}
  {% include 'partial/hero-realty.twig' %}

  {# GRID #}
  <section class="section has-top-widgets">

    {# Command Bar #}
    <div class="command-bar" id="realty-command-bar">
      <span class="command-bar__total"><span class="d-none d-sm-inline">–í—Å–µ–≥–æ ‚Äî </span><span data-command-bar-counter>{{ posts_count }}</span> –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>
      {# <div class="dropdown is-leftward-xs" data-dropdown>
        <button class="dropdown__label" id="sort-properties" type="button" aria-controls="sort-properties-list" aria-expanded="false" data-dropdown-toggle>
          <svg class="icon" aria-hidden="true" focusable="false">
            <use href="{{ site.theme.link }}/img/base/graphics/sprite.svg#icon-sort"></use>
          </svg>
          –ü–æ —Ü–µ–Ω–µ<span class="d-none d-sm-inline"> –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è</span>
        </button>
        <ul class="dropdown__menu" id="sort-properties-list" role="listbox" aria-labelledby="sort-properties" data-dropdown-menu>
          <li role="option">
            <label class="dropdown__item">
              <input class="form__check-input" name="sort" type="radio" value="price" data-label="–ü–æ —Ü–µ–Ω–µ&lt;span class=&quot;d-none d-sm-inline&quot;&gt; –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è&lt;/span&gt;" checked>
              –ü–æ —Ü–µ–Ω–µ
            </label>
          </li>
          <li role="option">
            <label class="dropdown__item">
              <input class="form__check-input" name="sort" type="radio" value="date" data-label="–ü–æ –¥–∞—Ç–µ&lt;span class=&quot;d-none d-sm-inline&quot;&gt; –¥–æ–±–∞–≤–ª–µ–Ω–∏—è&lt;/span&gt;">
              –ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            </label>
          </li>
        </ul>
      </div> #}
      <button class="collapsible-panel-toggle d-none d-mdl-inline-block" id="show-map" type="button" aria-controls="map" aria-expanded="false" data-collapsible-panel-toggle>
        <svg class="icon" aria-hidden="true" focusable="false">
          <use href="{{ site.theme.link }}/img/base/graphics/sprite.svg#icon-map"></use>
        </svg>
        –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É
      </button>

      <a class="btn is-outline d-none d-mdl-inline-flex" href="{{ site.url }}/wp-admin/post-new.php?post_type=realty" >+ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>
    </div>

    <div class="collapsible-panel has-map" id="map"></div>

    {% if posts[0] %}
      <div class="grid has-12">
        {% for post in posts %}
          {% include 'partial/teaser-real-estate.twig' %}
        {% endfor %}
      </div>
      {% include 'partial/pagination.twig' with {pagination: posts.pagination({show_all: false, mid_size: 3, end_size: 2})} %}
    {% else %}
      <figure class="border m-auto">
        <span class="border__addon is-nothing">
          ü§∑üèº
        </span>
        <img src="{{ site.theme.link }}/img/pages/404.jpg" alt="{{ fn('pll__', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') }}">
      </figure>
      <p class="text-center">{{ fn('pll__', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ç–æ, —á—Ç–æ –∏—â–∏—Ç–µ, –µ—Å–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.') }}</p>
    {% endif %}
  </section>
{% endblock %}

{% block scripts %}
  {{ parent() }}

  <script>
    function initMap() {
      const locations = [
        {% if posts[0] %}
          {% for post in posts %}
            ['{{ post.title }}', '{{ post.link }}', '{{ post.meta('property_district') }}', '{{ post.meta('property_locality') }}'{% if post.meta('property_address').property_street %}, '{{ post.meta('property_address').property_street }}'{% endif %}],
          {% endfor %}
        {% endif %}
      ];

      const map = new google.maps.Map(document.getElementById('map'), {
        zoom: 8,
        center: new google.maps.LatLng(39.5847447, -8.5593819),
      });

      const infowindow = new google.maps.InfoWindow();
      const geocoder = new google.maps.Geocoder();

      function createMarker(latlng, html) {
        const marker = new google.maps.Marker({
          position: latlng,
          map,
        });

        google.maps.event.addListener(marker, 'click', () => {
          infowindow.setContent(html);
          infowindow.open(map, marker);
        });
      }

      function geocodeAddress(location) {
        const address = location.slice(2).join();

        geocoder.geocode({ address: address }, (results, status) => {
          // alert(status);
          if (status === google.maps.GeocoderStatus.OK) {
            // alert(results[0].geometry.location);
            map.setCenter(results[0].geometry.location);
            createMarker(
              results[0].geometry.location,
              `<a href="${location[1]}">${location[0]}</a>`
            );
          }
        });
      }

      for (let i = 0; i < locations.length; i++) {
        geocodeAddress(locations[i]);
      }
    }
  </script>

  <script async defer src="https://maps.googleapis.com/maps/api/js?key={{ maps_api }}&callback=initMap"></script>
{% endblock %}
